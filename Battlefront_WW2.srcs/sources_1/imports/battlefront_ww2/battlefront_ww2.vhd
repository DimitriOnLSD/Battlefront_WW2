library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity battlefront_ww2 is
	port (
		clk, reset       : in std_logic;
		pixel_x, pixel_y : in std_logic_vector(9 downto 0);
		video_on         : in std_logic;
		btn              : in std_logic_vector(3 downto 0);
		sw               : in std_logic_vector(3 downto 0);
		graph_rgb        : out std_logic_vector(11 downto 0);
		led              : out std_logic_vector(15 downto 0)
	);
end battlefront_ww2;

architecture arch of battlefront_ww2 is
	----------------------------------------------
	-- SCREEN & BORDER CONSTANTS
	----------------------------------------------
	signal pix_x, pix_y       : unsigned(9 downto 0);
	constant MAX_X            : integer := 640;                     
	constant MAX_Y            : integer := 480;                     
	constant BORDER_THICKNESS : integer := 32;                      
    constant LEFT_MARGIN      : integer := BORDER_THICKNESS;        
	constant RIGHT_MARGIN     : integer := MAX_X - BORDER_THICKNESS;
	----------------------------------------------
	-- COLORS
	----------------------------------------------
	signal border_rgb : std_logic_vector(11 downto 0) := "000000000000";
	signal inner_rgb  : std_logic_vector(11 downto 0) := "111111111111";
	signal level_rgb  : std_logic_vector(11 downto 0) := "000000000000";
	signal text_rgb   : std_logic_vector(11 downto 0) := "111111111111";
	----------------------------------------------
	-- FLOOR, PLATFORMS & LEVELS CONSTANTS
	----------------------------------------------
	constant LEVEL_THICKNESS : integer := 16;
	constant LEVEL_DISTANCE  : integer := 64;
	constant LEVEL_1_WIDTH   : integer := 64;
	constant LEVEL_2_WIDTH   : integer := 128;
	constant LEVEL_3_WIDTH   : integer := 256;
    ----------------------------------------------
    constant L0_Y : integer := MAX_Y - BORDER_THICKNESS; -- Bottom platform
    ----------------------------------------------
	constant L1_Y    : integer := MAX_Y - BORDER_THICKNESS - LEVEL_DISTANCE - LEVEL_THICKNESS;
	constant L1P1_X1 : integer := LEFT_MARGIN;                                                         
	constant L1P1_X2 : integer := LEFT_MARGIN + LEVEL_1_WIDTH;                                       
	constant L1P2_X1 : integer := 200;                                                                 
	constant L1P2_X2 : integer := 200 + LEVEL_3_WIDTH;                                               
    ----------------------------------------------	
    constant L2_Y    : integer := L1_Y - LEVEL_DISTANCE - LEVEL_THICKNESS;               
	constant L2P1_X1 : integer := LEFT_MARGIN;                                           
	constant L2P1_X2 : integer := L2P1_X1 + 120;                           
	constant L2P2_X1 : integer := L2P1_X2 + 155;                             
	constant L2P2_X2 : integer := L2P2_X1 + 60;                            
	constant L2P3_X1 : integer := MAX_X - BORDER_THICKNESS - 60;                         
	constant L2P3_X2 : integer := MAX_X - BORDER_THICKNESS;                              
    ----------------------------------------------	
    constant L3_Y    : integer := L2_Y - LEVEL_DISTANCE - LEVEL_THICKNESS;          
	constant L3P1_X1 : integer := LEFT_MARGIN;                                           
	constant L3P1_X2 : integer := LEFT_MARGIN + 60;                                      
	constant L3P2_X1 : integer := MAX_X - BORDER_THICKNESS - 150;                        
	constant L3P2_X2 : integer := MAX_X - BORDER_THICKNESS;                              
	constant L3P3_X1 : integer := (MAX_X - 60) / 2 - 50;                                 
	constant L3P3_X2 : integer := L3P3_X1 + 60;                            
    ----------------------------------------------	
    constant L4_Y    : integer := L3_Y - LEVEL_DISTANCE - LEVEL_THICKNESS;          
	constant L4P1_X1 : integer := LEFT_MARGIN;                                           
	constant L4P1_X2 : integer := LEFT_MARGIN + 60;                                      
	constant L4P2_X1 : integer := LEFT_MARGIN + 240;                                     
	constant L4P2_X2 : integer := LEFT_MARGIN + 240 + LEVEL_3_WIDTH;                     
	----------------------------------------------
	-- ITEMS & CHARACTER ROMS
	----------------------------------------------
	constant CHAR_SIZE_X             : integer := 32;
	constant CHAR_SIZE_Y             : integer := 32;
	constant CHAR_V_X                : integer := 1;
	constant CHAR_V_Y                : integer := 1;
	constant FEET_POSITION           : integer := 20;
	constant HEAD_POSITION           : integer := 18;
	constant HEAD_TO_BARREL_DISTANCE : integer := 11;
	----------------------------------------------
	constant PROJECTILE_SIZE_X : integer := 4;  -- changed from 5 to 4
	constant PROJECTILE_SIZE_Y : integer := 2;  -- changed from 3 to 2
	constant PROJECTILE_V_X    : integer := 10; -- changed from 5 to 10
    ----------------------------------------------
	constant HEART_SIZE_X            : integer := 16;
	constant HEART_SIZE_Y            : integer := 16;
	constant DISTANCE_BETWEEN_HEARTS : integer := 4;
	constant HEART_P1_START_X        : integer := BORDER_THICKNESS;
	constant HEART_P2_START_X        : integer := MAX_X - BORDER_THICKNESS - 3 * HEART_SIZE_X - 2 * DISTANCE_BETWEEN_HEARTS;
	constant HEART_START_Y           : integer := 8;
	----------------------------------------------
	constant PLAYER_ONE_HEART_1_X : integer := HEART_P1_START_X;
	constant PLAYER_ONE_HEART_1_Y : integer := HEART_START_Y;
	constant PLAYER_ONE_HEART_2_X : integer := PLAYER_ONE_HEART_1_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_ONE_HEART_2_Y : integer := HEART_START_Y;
	constant PLAYER_ONE_HEART_3_X : integer := PLAYER_ONE_HEART_2_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_ONE_HEART_3_Y : integer := HEART_START_Y;
	----------------------------------------------
	constant PLAYER_TWO_HEART_3_X : integer := HEART_P2_START_X;
	constant PLAYER_TWO_HEART_3_Y : integer := HEART_START_Y;
	constant PLAYER_TWO_HEART_2_X : integer := PLAYER_TWO_HEART_3_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_TWO_HEART_2_Y : integer := HEART_START_Y;
	constant PLAYER_TWO_HEART_1_X : integer := PLAYER_TWO_HEART_2_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_TWO_HEART_1_Y : integer := HEART_START_Y;
	----------------------------------------------
	type rom_item_type       is array (0 to 15, 0 to 15) of std_logic_vector(11 downto 0);
	type rom_char_type       is array (0 to 31, 0 to 31) of std_logic_vector(11 downto 0);
	type rom_projectile_type is array (0 to  2, 0 to  4) of std_logic_vector(11 downto 0);
	----------------------------------------------
	-- CONSTANT PROJECTILE_ROM : rom_projectile_type :=
	-- (
	-- ("110111011101", "010001000100", "000000000000"),
	-- ("111111111111", "111111111111", "111111111111")
	-- );
	constant PROJECTILE_ROM : rom_projectile_type := 
	(
	("000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000")
    );
    ----------------------------------------------
    constant HEART_ROM : rom_item_type := 
    (
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000")
    );
    ----------------------------------------------
    constant AMERICAN_SOLDIER_IDLE_ROM : rom_char_type := 
    (

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "011001101001", "011001101001", "010001000110", "010001000110", "010001000110", "010001000110", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "011001101001", "011001101001", "111111111111", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000110", "010001000110", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "111110011001", "111110011001", "111110011001", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111101100110", "111101100110", "000100010001", "111111011011", "111111011011", "111111011011", "111111011011", "111111011011", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "111110011001", "111111011011", "111111011011", "111111011011", "111111011011", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000001000001", "000001000001", "000001000001", "000000000000", "111101100110", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "000001000001", "000000000000", "111101100110", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000"), 
    ("111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "000100010001", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000001000001", "000001000001", "001001100100", "001001100100", "001001100100", "000000000000", "001001100100", "001001100100", "001001100100", "001001100100", "000100010001", "000000000000", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "000000000000", "000000000000", "000000000000", "001000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "001000000000", "001000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "001001100100", "001001100100", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "111110011001", "000000000000", "000000000000", "000001000001", "000000000000", "111110011001", "111101100110", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000010001", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "000000000000", "000000000000", "000000000000", "000001000001", "000000000000", "111110011001", "111101100110", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000010001", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111101100110", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011001101001", "011001101001", "011001101001", "011001101001", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011001101001", "011001101001", "011001101001", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011001101001", "011001101001", "011001101001", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "011001101001", "010001000110", "010001000110", "010001000110", "010001000110", "000000000001", "000100010100", "000100010100", "000100010100", "000100010100", "000000000001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000110", "010001000110", "010001000110", "010001000110", "000000000001", "000000000000", "000000000000", "000000000000", "000000000000", "000100010100", "000000000001", "000000000001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000110", "010001000110", "010001000110", "010001000110", "000100010100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010100", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000000000001", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000000000001", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000100010001", "000100010001", "000000000000", "000000000000", "000000000000", "111111111111", "000000000000", "000000000001", "000000000001", "000000000001", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "010100010000", "010100010000", "000000000000", "000000000000", "000000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001000000000", "010100010000", "001000000000", "001000000000", "001000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "000000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "000000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 

    );
    ----------------------------------------------
    constant AMERICAN_SOLDIER_WALK_B_ROM : rom_char_type := 
    (

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "011001111000", "011001111000", "011001111000", "010001010110", "010001010110", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "011001111000", "111111111111", "010001010110", "010001010110", "010001010110", "010001010110", "010001010110", "001000110011", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "011001111000", "111111111111", "010001010110", "010001010110", "010001010110", "010001010110", "001100110100", "001100110100", "001100110100", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "010001010110", "010001010110", "010001010110", "010001010110", "001100110100", "001100110100", "001100110100", "001100110100", "001100110100", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001100110100", "001100110100", "001100110100", "001100110100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111110101001", "111110101001", "111110101001", "001100110011", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111110101001", "111110101001", "111110101001", "001100110011", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111001100111", "001100110011", "111111011011", "111111011011", "111111011011", "111111011011", "111001100111", "111111111111", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111110101001", "111111011011", "111111011011", "111001100111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "001001100100", "010000100011", "001001010011", "000000000000", "000000000000", "000000000000", "001000100011", "001000100011", "001000100011", "001000100011", "001000100011", "001000100011", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001010011", "111111111111", "001001100100", "001001100100", "000000000000", "010100110011", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100000000", "000100000000", "000000000000", "000000000000", "000100000000", "000100000000", "000100000000", "000100000000", "000100000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001010011", "111111111111", "001001100100", "001001100100", "000000000000", "010100110011", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "010000010000", "010100010000", "010100010000", "010100010000", "010000010000", "000000000000", "000000000000", "010000010000", "010100010000", "010100010000", "010100010000", "010100010000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001010011", "001001010011", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010000010000", "010100010000", "010000010000", "010000010000", "000000000000", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "000100100010", "000000000000", "111110011001", "111110101001", "111110101001", "111110101001", "111110101001", "000000000000", "000100100010", "000100100010", "111110101001", "111001100111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "000100010001", "000000000000", "111110101001", "111110101001", "111110101001", "111110101001", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111001100111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "000100100010", "000000000000", "111110011001", "111110101001", "111110101001", "111110101001", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111001100111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000100100010", "000100100010", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001001010011", "000000000000", "001001010011", "001001010011", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010101010111", "010101010111", "001100110101", "000100010100", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010001000111", "010001000110", "001000100101", "000100010100", "000000000001", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "001100010000", "001100010000", "001000010000", "000000000000", "001000010000", "000000000000", "000000000000", "010001000110", "001000100101", "000100010100", "000100010100", "000000000001", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "001000010000", "000000000000", "001000010000", "000000000000", "000000000000", "001000100100", "000100010100", "000100010100", "000100010100", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "000000000000", "000000000000", "001000010000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "000000000000", "000000000000", "001100010000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "000000000000", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 


    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 


    );
    ----------------------------------------------
    constant GERMAN_SOLDIER_IDLE_ROM : rom_char_type := 
    (

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001000100010", "010001000100", "010001000100", "010001010101", "011101110111", "011101110111", "000100010001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "001000100010", "001000100010", "001000100010", "001000100010", "010101010101", "111111111111", "111111111111", "101110111011", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "001000100010", "001000100010", "001000100010", "001000100010", "010101010101", "111111111111", "111111111111", "101110111011", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "001000100010", "001000100010", "001100110011", "001100110011", "001100110011", "010001000100", "010001000100", "010101010101", "000100010001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "001100110011", "001100110011", "001000100010", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "001000100010", "111110111001", "111110111001", "111110111001", "111110111001", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111101100110", "111101100110", "111111011011", "111111011011", "111111011011", "111111011011", "001000100010", "001000100010", "111101100110", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111101100110", "111101100110", "111111011011", "111111011011", "111111011011", "111111011011", "001000100010", "001000100010", "111101100110", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111101100110", "111101100110", "111111011011", "111111011011", "111111011011", "111110111001", "000000000000", "000000000000", "000000000000", "000000010001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "101001000100", "101001000100", "000000000000", "001000100010", "001000100010", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111"),
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "001100100010", "001000100010", "001000100010", "010001000100", "010001000100", "010001000100", "001100110011", "001100110011", "001100110011", "001100110011", "101000010001", "100000000000", "000000000000", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "001100110011", "001100110011", "001100110011", "001100110011", "001000100010", "000000000000", "000000000000", "001100110011", "110101000100", "001000010001", "000100010001", "011100100010", "000000000000"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "001100110011", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "011000100010", "111110111011", "001100110011", "000100010001", "011001100110", "001100000000"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "001100110011", "010001000100", "011100000000", "110101100110", "000000000000", "011001100110", "000000000000", "000000000000"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111110010111", "111110101000", "111110101000", "000000000000", "000000000000", "000000000000", "111101100110", "111110000111", "111110111001", "111110111001", "000000000000", "001000100010", "001000100010", "010001000100", "010001000100", "010001000100", "010001000100", "010001000100", "001000100010", "100000010001", "111110101010", "110010101010", "000000000000", "000000000000"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111110010111", "111110101000", "111110101000", "000000000000", "000000000000", "000000000000", "010000100010", "111101110111", "111110101000", "111110101000", "000000000000", "001000100010", "001000100010", "010001000100", "010001000100", "010001000100", "010001000100", "010001000100", "010001000100", "001000010001", "100000000000", "000100000000", "000000000000", "000100000000"),

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000100010001", "001100110011", "010001000100", "010001000100", "010001000100", "010101010101", "001000100010", "001000100010", "001000100010", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000100010001", "001100110011", "010001000100", "010001000100", "010001000100", "010101010101", "001000100010", "001000100010", "001000100010", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "000100010001", "000100010001", "000100010001", "010101010101", "010101010101", "010101010101", "010001000100", "010001000100", "010001000100", "001100110011", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000100010001", "000100010001", "010001010101", "010101010101", "010101010101", "010101010101", "010101010101", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "000000000000", "000000010001", "010101010101", "010101010101", "010101010101", "010101010101", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "000100010001", "000100010001", "000100010001", "000000000000", "000000000000", "000000000000", "010101010101", "010101010101", "010101010101", "010101010101", "010101010101", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "000100010001", "000100010001", "000100010001", "000000000000", "000000000000", "000000000000", "010101010101", "010101010101", "010101010101", "010101010101", "010101010101", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "000100010001", "000100010001", "001000100010", "000100010001", "000100010001", "111111111111", "111111111111", "000000010001", "000000010001", "010101010101", "010101010101", "010001000100", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "000100010001", "000100010001", "001000100010", "000100010001", "000100010001", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111"),
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111"),



    );
    ----------------------------------------------
    -- SPAWN CONSTANTS, CHARACTERS AND PROJECTILES SIGNALS
    ----------------------------------------------
    constant player_one_spawn_x : integer := MAX_X/2 - CHAR_SIZE_X/2;
    constant player_one_spawn_y : integer := MAX_Y - CHAR_SIZE_X * 2;
    ----------------------------------------------
    constant player_two_spawn_x : integer := MAX_X/2 - CHAR_SIZE_X/2;
    constant player_two_spawn_y : integer := L4_Y - CHAR_SIZE_Y;
    ----------------------------------------------
    signal player_one_lives_reg, player_one_lives_next  : integer range 0 to 3 := 3;
    signal player_two_lives_reg, player_two_lives_next  : integer range 0 to 3 := 3;
    ----------------------------------------------
    signal p1_x_reg, p1_x_next : unsigned(9 downto 0) := to_unsigned(player_one_spawn_x, 10);
    signal p1_y_reg, p1_y_next : unsigned(9 downto 0) := to_unsigned(player_one_spawn_y, 10);
    ----------------------------------------------
    signal p2_x_reg, p2_x_next : unsigned(9 downto 0) := to_unsigned(player_two_spawn_x, 10);
    signal p2_y_reg, p2_y_next : unsigned(9 downto 0) := to_unsigned(player_two_spawn_y, 10);
    ----------------------------------------------
    signal projectile_p1_x_reg  : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p1_y_reg  : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p1_x_next : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p1_y_next : unsigned(9 downto 0) := to_unsigned(0, 10);
    ----------------------------------------------
    signal projectile_p2_x_reg  : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p2_y_reg  : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p2_x_next : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p2_y_next : unsigned(9 downto 0) := to_unsigned(0, 10);
    ----------------------------------------------
    -- COLLISION & HIT SIGNALS
    ----------------------------------------------
    signal p1_collision_top        : std_logic := '0';
    signal p1_collision_bottom     : std_logic := '0';
    signal p1_collision_left_side  : std_logic := '0';
    signal p1_collision_right_side : std_logic := '0';
    ----------------------------------------------
    signal p2_collision_top        : std_logic := '0';
    signal p2_collision_bottom     : std_logic := '0';
    signal p2_collision_left_side  : std_logic := '0';
    signal p2_collision_right_side : std_logic := '0';
    ----------------------------------------------
    signal p1_collision_margin_top    : std_logic := '0';
    signal p1_collision_margin_bottom : std_logic := '0';
    signal p1_collision_margin_left   : std_logic := '0';
    signal p1_collision_margin_right  : std_logic := '0';
    ----------------------------------------------
    signal p2_collision_margin_top    : std_logic := '0';
    signal p2_collision_margin_bottom : std_logic := '0';
    signal p2_collision_margin_left   : std_logic := '0';
    signal p2_collision_margin_right  : std_logic := '0';
    ----------------------------------------------
    signal p1_hit_border : std_logic := '0';
    signal p2_hit_border : std_logic := '0';
    ----------------------------------------------
    signal p1_hit_p2     : std_logic := '0';
    signal p2_hit_p1     : std_logic := '0';
    ----------------------------------------------
    -- REFERENCE TICK
    ----------------------------------------------
    signal refr_tick : std_logic;
    ----------------------------------------------
begin
	----------------------------------------------
	-- REFERENCE TICK AND RESET LOGIC
	----------------------------------------------
	process (clk, reset)
	begin
		if reset = '1' then
			p1_x_reg <= to_unsigned(player_one_spawn_x, 10);
			p1_y_reg <= to_unsigned(player_one_spawn_y, 10);
			p2_x_reg <= to_unsigned(player_two_spawn_x, 10);
			p2_y_reg <= to_unsigned(player_two_spawn_y, 10);
            player_one_lives_reg <= 3;
            player_two_lives_reg <= 3;
            projectile_p1_x_reg <= to_unsigned(0, 10);
            projectile_p1_y_reg <= to_unsigned(0, 10);
            projectile_p2_x_reg <= to_unsigned(0, 10);
            projectile_p2_y_reg <= to_unsigned(0, 10);
		elsif (clk'EVENT and clk = '1') then
			p1_x_reg <= p1_x_next;
			p1_y_reg <= p1_y_next;
			p2_x_reg <= p2_x_next;
			p2_y_reg <= p2_y_next;
            projectile_p1_x_reg <= projectile_p1_x_next;
            projectile_p1_y_reg <= projectile_p1_y_next;
            projectile_p2_x_reg <= projectile_p2_x_next;            
            projectile_p2_y_reg <= projectile_p2_y_next;
            player_one_lives_reg <= player_one_lives_next;
            player_two_lives_reg <= player_two_lives_next;
		end if;
	end process;
	pix_x <= unsigned(pixel_x);
	pix_y <= unsigned(pixel_y);
	refr_tick <= '1' when (pix_y = 481) and (pix_x = 0) else '0';
    ----------------------------------------------
	-- LED DEBUG
	----------------------------------------------
    process (p1_collision_margin_top, p1_collision_margin_bottom, p1_collision_margin_left, p1_collision_margin_right, p1_collision_top, p1_collision_bottom)
    begin

        if p1_collision_margin_top = '1' then
            led(0) <= '1';
        else
            led(0) <= '0';
        end if;

        if p1_collision_margin_bottom = '1' then
            led(1) <= '1';
        else
            led(1) <= '0';
        end if;

        if p1_collision_margin_left = '1' then
            led(2) <= '1';
        else
            led(2) <= '0';
        end if;

        if p1_collision_margin_right = '1' then
            led(3) <= '1';
        else
            led(3) <= '0';
        end if;

        if p1_collision_top = '1' then
            led(4) <= '1';
        else
            led(4) <= '0';
        end if;

        if p1_collision_bottom = '1' then
            led(5) <= '1';
        else
            led(5) <= '0';
        end if;

    end process;
	----------------------------------------------
	-- PLAYER ONE MOVEMENT & SHOOTING LOGIC
	----------------------------------------------
    process (refr_tick, btn, p1_x_reg, p1_y_reg, projectile_p1_x_reg, projectile_p1_y_reg, 
        p1_collision_margin_top, p1_collision_margin_bottom, 
        p1_collision_margin_left, p1_collision_margin_right, 
        p1_collision_top, p1_collision_bottom, p1_hit_border, p1_hit_p2)
    begin
    -- Default assignments to avoid latches
    p1_x_next <= p1_x_reg;
    p1_y_next <= p1_y_reg;
    projectile_p1_x_next <= projectile_p1_x_reg;
    projectile_p1_y_next <= projectile_p1_y_reg;

        if refr_tick = '1' then

            -- Horizontal movement
            if btn(0) = '1' then -- Move left
                if p1_collision_margin_left = '0' then
                    p1_x_next <= p1_x_reg - CHAR_V_X;
                end if;
            elsif btn(1) = '1' then -- Move right
                if p1_collision_margin_right = '0' then
                    p1_x_next <= p1_x_reg + CHAR_V_X;
                end if;
            end if;

            -- Vertical movement
            if btn(2) = '1' then -- Move up
                if (p1_collision_margin_top = '0') and (p1_collision_top = '0') then
                    p1_y_next <= p1_y_reg - CHAR_V_Y;
                end if;
            else -- Move down
                if (p1_collision_margin_bottom = '0') and (p1_collision_bottom = '0') then
                    p1_y_next <= p1_y_reg + CHAR_V_Y;
                elsif (p1_collision_top = '1') then
                    p1_y_next <= p1_y_reg + CHAR_V_Y; -- Override upward collision
                end if;
            end if;

            -- Shooting logic
            if btn(3) = '1' then
                -- Fire projectile from player's position
                projectile_p1_x_next <= p1_x_reg + CHAR_SIZE_X - PROJECTILE_SIZE_X;
                projectile_p1_y_next <= p1_y_reg + HEAD_TO_BARREL_DISTANCE;
            else
                -- Update projectile movement
                if (p1_hit_border = '0') and (p1_hit_p2 = '0') then
                    projectile_p1_x_next <= projectile_p1_x_reg + PROJECTILE_V_X;
                    projectile_p1_y_next <= projectile_p1_y_reg;
                else
                    -- Reset projectile position after hitting the border or player 2
                    projectile_p1_x_next <= to_unsigned(0, 10);
                    projectile_p1_y_next <= to_unsigned(0, 10);
                end if;
            end if;

        end if;
    end process;
    ----------------------------------------------
	-- PLAYER TWO MOVEMENT & SHOOTING LOGIC
	----------------------------------------------
    process (refr_tick, sw, 
        p2_x_reg, p2_y_reg, 
        projectile_p2_x_reg, projectile_p2_y_reg, 
        p2_collision_margin_top, p2_collision_margin_bottom, 
        p2_collision_margin_left, p2_collision_margin_right, 
        p2_collision_top, p2_collision_bottom, 
        p2_hit_border, p2_hit_p1)
    begin
    -- Default assignments to avoid latches
    p2_x_next <= p2_x_reg;
    p2_y_next <= p2_y_reg;
    projectile_p2_x_next <= projectile_p2_x_reg;
    projectile_p2_y_next <= projectile_p2_y_reg;

        if refr_tick = '1' then

            -- Horizontal movement
            if sw(0) = '1' then -- Move left
                if p2_collision_margin_left = '0' then
                    p2_x_next <= p2_x_reg - CHAR_V_X;
                end if;
            elsif sw(1) = '1' then -- Move right
                if p2_collision_margin_right = '0' then
                    p2_x_next <= p2_x_reg + CHAR_V_X;
                end if;
            end if;

            -- Vertical movement
            if sw(2) = '1' then -- Move up
                if (p2_collision_margin_top = '0') and (p2_collision_top = '0') then
                    p2_y_next <= p2_y_reg - CHAR_V_Y;
                end if;
            else -- Move down
                if (p2_collision_margin_bottom = '0') and (p2_collision_bottom = '0') then
                    p2_y_next <= p2_y_reg + CHAR_V_Y;
                elsif (p2_collision_top = '1') then
                    p2_y_next <= p2_y_reg + CHAR_V_Y; -- Override upward collision
                end if;
            end if;

            -- Shooting logic
            if sw(3) = '1' then
                -- Fire projectile from player 2's position
                projectile_p2_x_next <= p2_x_reg;
                projectile_p2_y_next <= p2_y_reg + HEAD_TO_BARREL_DISTANCE;
            else
                -- Update projectile movement
                if (p2_hit_border = '0') and (p2_hit_p1 = '0') then
                    projectile_p2_x_next <= projectile_p2_x_reg - PROJECTILE_V_X;
                    projectile_p2_y_next <= projectile_p2_y_reg;
                else
                    -- Reset projectile position after hitting the border or player 1
                    projectile_p2_x_next <= to_unsigned(0, 10);
                    projectile_p2_y_next <= to_unsigned(0, 10);
                end if;
            end if;

        end if;

    end process;
    ----------------------------------------------
    -- COLLISION BORDER LOGIC
    ----------------------------------------------
    process (p1_x_reg, p1_y_reg, p2_x_reg, p2_y_reg)
    begin
        -- Default collision states for Player 1
        p1_collision_margin_bottom <= '0';
        p1_collision_margin_top <= '0';
        p1_collision_margin_left <= '0';
        p1_collision_margin_right <= '0';
    
        -- Default collision states for Player 2
        p2_collision_margin_bottom <= '0';
        p2_collision_margin_top <= '0';
        p2_collision_margin_left <= '0';
        p2_collision_margin_right <= '0';
    
        -- Player 1 Collision Detection
        if (p1_y_reg >= (L0_Y - CHAR_SIZE_Y)) then
            p1_collision_margin_bottom <= '1'; -- Floor collision
        elsif (p1_y_reg <= BORDER_THICKNESS) then
            p1_collision_margin_top <= '1'; -- Top border collision
        end if;
    
        if (p1_x_reg <= LEFT_MARGIN) then
            p1_collision_margin_left <= '1'; -- Left border collision
        elsif (p1_x_reg >= (RIGHT_MARGIN - CHAR_SIZE_X)) then
            p1_collision_margin_right <= '1'; -- Right border collision
        end if;
    
        -- Player 2 Collision Detection
        if (p2_y_reg >= (L0_Y - CHAR_SIZE_Y)) then
            p2_collision_margin_bottom <= '1'; -- Floor collision
        elsif (p2_y_reg <= BORDER_THICKNESS) then
            p2_collision_margin_top <= '1'; -- Top border collision
        end if;
    
        if (p2_x_reg <= LEFT_MARGIN) then
            p2_collision_margin_left <= '1'; -- Left border collision
        elsif (p2_x_reg >= (RIGHT_MARGIN - CHAR_SIZE_X)) then
            p2_collision_margin_right <= '1'; -- Right border collision
        end if;
    
    end process;
    ----------------------------------------------
    -- COLLISION PLATFORM LOGIC
    ----------------------------------------------
    process (p1_x_reg, p1_y_reg, p2_x_reg, p2_y_reg)
    begin
        -- Player 1 collision with feet on platforms
        -- Each line represents a platform
        if 
        ((p1_x_reg + FEET_POSITION > L1P1_X1) and (p1_x_reg < L1P1_X2) and (p1_y_reg + CHAR_SIZE_Y >= L1_Y) and (p1_y_reg < L1_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L1P2_X1) and (p1_x_reg < L1P2_X2) and (p1_y_reg + CHAR_SIZE_Y >= L1_Y) and (p1_y_reg < L1_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L2P1_X1) and (p1_x_reg < L2P1_X2) and (p1_y_reg + CHAR_SIZE_Y >= L2_Y) and (p1_y_reg < L2_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L2P2_X1) and (p1_x_reg < L2P2_X2) and (p1_y_reg + CHAR_SIZE_Y >= L2_Y) and (p1_y_reg < L2_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L2P3_X1) and (p1_x_reg < L2P3_X2) and (p1_y_reg + CHAR_SIZE_Y >= L2_Y) and (p1_y_reg < L2_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L3P1_X1) and (p1_x_reg < L3P1_X2) and (p1_y_reg + CHAR_SIZE_Y >= L3_Y) and (p1_y_reg < L3_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L3P2_X1) and (p1_x_reg < L3P2_X2) and (p1_y_reg + CHAR_SIZE_Y >= L3_Y) and (p1_y_reg < L3_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L3P3_X1) and (p1_x_reg < L3P3_X2) and (p1_y_reg + CHAR_SIZE_Y >= L3_Y) and (p1_y_reg < L3_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L4P1_X1) and (p1_x_reg < L4P1_X2) and (p1_y_reg + CHAR_SIZE_Y >= L4_Y) and (p1_y_reg < L4_Y + LEVEL_THICKNESS)) or
        ((p1_x_reg + FEET_POSITION > L4P2_X1) and (p1_x_reg < L4P2_X2) and (p1_y_reg + CHAR_SIZE_Y >= L4_Y) and (p1_y_reg < L4_Y + LEVEL_THICKNESS)) then
            p1_collision_bottom <= '1';
        else
            p1_collision_bottom <= '0';
        end if;

        -- Player 1 collision with head on platforms
        -- Each line represents a platform
        if
        ((p1_x_reg + HEAD_POSITION > L1P1_X1) and (p1_x_reg < L1P1_X2) and (p1_y_reg <= L1_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L1_Y)) or
        ((p1_x_reg + HEAD_POSITION > L1P2_X1) and (p1_x_reg < L1P2_X2) and (p1_y_reg <= L1_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L1_Y)) or
        ((p1_x_reg + HEAD_POSITION > L2P1_X1) and (p1_x_reg < L2P1_X2) and (p1_y_reg <= L2_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L2_Y)) or
        ((p1_x_reg + HEAD_POSITION > L2P2_X1) and (p1_x_reg < L2P2_X2) and (p1_y_reg <= L2_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L2_Y)) or
        ((p1_x_reg + HEAD_POSITION > L2P3_X1) and (p1_x_reg < L2P3_X2) and (p1_y_reg <= L2_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L2_Y)) or
        ((p1_x_reg + HEAD_POSITION > L3P1_X1) and (p1_x_reg < L3P1_X2) and (p1_y_reg <= L3_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L3_Y)) or
        ((p1_x_reg + HEAD_POSITION > L3P2_X1) and (p1_x_reg < L3P2_X2) and (p1_y_reg <= L3_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L3_Y)) or
        ((p1_x_reg + HEAD_POSITION > L3P3_X1) and (p1_x_reg < L3P3_X2) and (p1_y_reg <= L3_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L3_Y)) or
        ((p1_x_reg + HEAD_POSITION > L4P1_X1) and (p1_x_reg < L4P1_X2) and (p1_y_reg <= L4_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L4_Y)) or
        ((p1_x_reg + HEAD_POSITION > L4P2_X1) and (p1_x_reg < L4P2_X2) and (p1_y_reg <= L4_Y + LEVEL_THICKNESS) and (p1_y_reg + CHAR_SIZE_Y > L4_Y)) then
            p1_collision_top <= '1';
        else
            p1_collision_top <= '0';
        end if;

        -- Player 2 collision with feet on platforms
        -- Each line represents a platform
        if 
        ((p2_x_reg + FEET_POSITION > L1P1_X1) and (p2_x_reg < L1P1_X2) and (p2_y_reg + CHAR_SIZE_Y >= L1_Y) and (p2_y_reg < L1_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L1P2_X1) and (p2_x_reg < L1P2_X2) and (p2_y_reg + CHAR_SIZE_Y >= L1_Y) and (p2_y_reg < L1_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L2P1_X1) and (p2_x_reg < L2P1_X2) and (p2_y_reg + CHAR_SIZE_Y >= L2_Y) and (p2_y_reg < L2_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L2P2_X1) and (p2_x_reg < L2P2_X2) and (p2_y_reg + CHAR_SIZE_Y >= L2_Y) and (p2_y_reg < L2_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L2P3_X1) and (p2_x_reg < L2P3_X2) and (p2_y_reg + CHAR_SIZE_Y >= L2_Y) and (p2_y_reg < L2_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L3P1_X1) and (p2_x_reg < L3P1_X2) and (p2_y_reg + CHAR_SIZE_Y >= L3_Y) and (p2_y_reg < L3_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L3P2_X1) and (p2_x_reg < L3P2_X2) and (p2_y_reg + CHAR_SIZE_Y >= L3_Y) and (p2_y_reg < L3_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L3P3_X1) and (p2_x_reg < L3P3_X2) and (p2_y_reg + CHAR_SIZE_Y >= L3_Y) and (p2_y_reg < L3_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L4P1_X1) and (p2_x_reg < L4P1_X2) and (p2_y_reg + CHAR_SIZE_Y >= L4_Y) and (p2_y_reg < L4_Y + LEVEL_THICKNESS)) or
        ((p2_x_reg + FEET_POSITION > L4P2_X1) and (p2_x_reg < L4P2_X2) and (p2_y_reg + CHAR_SIZE_Y >= L4_Y) and (p2_y_reg < L4_Y + LEVEL_THICKNESS)) then
            p2_collision_bottom <= '1';
        else
            p2_collision_bottom <= '0';
        end if;

        -- Player 2 collision with head on platforms
        -- Each line represents a platform
        if
        ((p2_x_reg + HEAD_POSITION > L1P1_X1) and (p2_x_reg < L1P1_X2) and (p2_y_reg <= L1_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L1_Y)) or
        ((p2_x_reg + HEAD_POSITION > L1P2_X1) and (p2_x_reg < L1P2_X2) and (p2_y_reg <= L1_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L1_Y)) or
        ((p2_x_reg + HEAD_POSITION > L2P1_X1) and (p2_x_reg < L2P1_X2) and (p2_y_reg <= L2_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L2_Y)) or
        ((p2_x_reg + HEAD_POSITION > L2P2_X1) and (p2_x_reg < L2P2_X2) and (p2_y_reg <= L2_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L2_Y)) or
        ((p2_x_reg + HEAD_POSITION > L2P3_X1) and (p2_x_reg < L2P3_X2) and (p2_y_reg <= L2_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L2_Y)) or
        ((p2_x_reg + HEAD_POSITION > L3P1_X1) and (p2_x_reg < L3P1_X2) and (p2_y_reg <= L3_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L3_Y)) or
        ((p2_x_reg + HEAD_POSITION > L3P2_X1) and (p2_x_reg < L3P2_X2) and (p2_y_reg <= L3_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L3_Y)) or
        ((p2_x_reg + HEAD_POSITION > L3P3_X1) and (p2_x_reg < L3P3_X2) and (p2_y_reg <= L3_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L3_Y)) or
        ((p2_x_reg + HEAD_POSITION > L4P1_X1) and (p2_x_reg < L4P1_X2) and (p2_y_reg <= L4_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L4_Y)) or
        ((p2_x_reg + HEAD_POSITION > L4P2_X1) and (p2_x_reg < L4P2_X2) and (p2_y_reg <= L4_Y + LEVEL_THICKNESS) and (p2_y_reg + CHAR_SIZE_Y > L4_Y)) then
            p2_collision_top <= '1';
        else
            p2_collision_top <= '0';
        end if;

    end process;
    ----------------------------------------------
    -- HITBOX LOGIC
    ----------------------------------------------
    process (
        projectile_p1_x_reg, projectile_p1_y_reg, 
        projectile_p2_x_reg, projectile_p2_y_reg, 
        p1_x_reg, p1_y_reg, 
        p2_x_reg, p2_y_reg, 
        player_one_lives_reg, 
        player_two_lives_reg)
    begin 
    
        -- Bullet hit border checks
        if projectile_p1_x_reg >= (RIGHT_MARGIN - PROJECTILE_SIZE_X) then
            p1_hit_border <= '1';
        else
            p1_hit_border <= '0';
        end if;
    
        if projectile_p2_x_reg <= LEFT_MARGIN then
            p2_hit_border <= '1';
        else
            p2_hit_border <= '0';
        end if;
    
        -- Player 2 hit Player 1
        if (projectile_p2_x_reg >= p1_x_reg and projectile_p2_x_reg <= p1_x_reg + CHAR_SIZE_X and 
            projectile_p2_y_reg >= p1_y_reg and projectile_p2_y_reg <= p1_y_reg + CHAR_SIZE_Y) then
            player_one_lives_next <= player_one_lives_reg - 1;
            p2_hit_p1 <= '1';
        else
            player_one_lives_next <= player_one_lives_reg;
            p2_hit_p1 <= '0';
        end if;
    
        -- Player 1 hit Player 2
        if (projectile_p1_x_reg >= p2_x_reg and projectile_p1_x_reg <= p2_x_reg + CHAR_SIZE_X and 
            projectile_p1_y_reg >= p2_y_reg and projectile_p1_y_reg <= p2_y_reg + CHAR_SIZE_Y) then
            player_two_lives_next <= player_two_lives_reg - 1;
            p1_hit_p2 <= '1';
        else
            player_two_lives_next <= player_two_lives_reg;
            p1_hit_p2 <= '0';
        end if;
    
    end process;
    ----------------------------------------------
    -- PRINT OBJECTS
    ----------------------------------------------
    process (video_on, level_rgb, inner_rgb, pix_x, pix_y, p1_x_reg, p1_y_reg, p2_x_reg, p2_y_reg, projectile_p1_x_reg, projectile_p1_y_reg, projectile_p2_x_reg, projectile_p2_y_reg, player_one_lives_reg, player_two_lives_reg)
    begin
        if video_on = '0' then
            graph_rgb <= "000000000000"; -- Black when video is off
        else

            -- Player 1 Heart 1
            if player_one_lives_reg >= 1 and
            (to_integer(pix_x) >= PLAYER_ONE_HEART_1_X and
            to_integer(pix_x) < PLAYER_ONE_HEART_1_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_ONE_HEART_1_Y and
            to_integer(pix_y) < PLAYER_ONE_HEART_1_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_ONE_HEART_1_Y, to_integer(pix_x) - PLAYER_ONE_HEART_1_X);

            -- Player 1 Heart 2
            elsif player_one_lives_reg >= 2 and
            (to_integer(pix_x) >= PLAYER_ONE_HEART_2_X and
            to_integer(pix_x) < PLAYER_ONE_HEART_2_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_ONE_HEART_2_Y and
            to_integer(pix_y) < PLAYER_ONE_HEART_2_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_ONE_HEART_2_Y, to_integer(pix_x) - PLAYER_ONE_HEART_2_X);

            -- Player 1 Heart 3
            elsif player_one_lives_reg >= 3 and
            (to_integer(pix_x) >= PLAYER_ONE_HEART_3_X and
            to_integer(pix_x) < PLAYER_ONE_HEART_3_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_ONE_HEART_3_Y and
            to_integer(pix_y) < PLAYER_ONE_HEART_3_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_ONE_HEART_3_Y, to_integer(pix_x) - PLAYER_ONE_HEART_3_X);

            -- Player 2 Heart 1
            elsif player_two_lives_reg >= 1 and
            (to_integer(pix_x) >= PLAYER_TWO_HEART_1_X and
            to_integer(pix_x) < PLAYER_TWO_HEART_1_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_TWO_HEART_1_Y and
            to_integer(pix_y) < PLAYER_TWO_HEART_1_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_TWO_HEART_1_Y, to_integer(pix_x) - PLAYER_TWO_HEART_1_X);

            -- Player 2 Heart 2
            elsif player_two_lives_reg >= 2 and
            (to_integer(pix_x) >= PLAYER_TWO_HEART_2_X and
            to_integer(pix_x) < PLAYER_TWO_HEART_2_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_TWO_HEART_2_Y and
            to_integer(pix_y) < PLAYER_TWO_HEART_2_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_TWO_HEART_2_Y, to_integer(pix_x) - PLAYER_TWO_HEART_2_X);

            -- Player 2 Heart 3
            elsif player_two_lives_reg >= 3 and
            (to_integer(pix_x) >= PLAYER_TWO_HEART_3_X and
            to_integer(pix_x) < PLAYER_TWO_HEART_3_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_TWO_HEART_3_Y and
            to_integer(pix_y) < PLAYER_TWO_HEART_3_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_TWO_HEART_3_Y, to_integer(pix_x) - PLAYER_TWO_HEART_3_X);

            -- Border print
            elsif
            (to_integer(pix_x) < BORDER_THICKNESS) or
            (to_integer(pix_x) >= MAX_X - BORDER_THICKNESS) or
            (to_integer(pix_y) < BORDER_THICKNESS) or
            (to_integer(pix_y) >= MAX_Y - BORDER_THICKNESS) then
                graph_rgb <= level_rgb;

            -- Level 1 print
            elsif
            (to_integer(pix_y) >= L1_Y and
            to_integer(pix_y) < L1_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= L1P1_X1 and
            to_integer(pix_x) < L1P1_X2) or
            (to_integer(pix_x) >= L1P2_X1 and
            to_integer(pix_x) < L1P2_X2))) then
                graph_rgb <= level_rgb;

            -- Level 2 print
            elsif
            (to_integer(pix_y) >= L2_Y and
            to_integer(pix_y) < L2_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= L2P1_X1 and
            to_integer(pix_x) < L2P1_X2) or
            (to_integer(pix_x) >= L2P2_X1 and
            to_integer(pix_x) < L2P2_X2) or
            (to_integer(pix_x) >= L2P3_X1 and
            to_integer(pix_x) < L2P3_X2))) then
                graph_rgb <= level_rgb;

            -- Level 3 print
            elsif
            (to_integer(pix_y) >= L3_Y and
            to_integer(pix_y) < L3_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= L3P1_X1 and
            to_integer(pix_x) < L3P1_X2) or
            (to_integer(pix_x) >= L3P2_X1 and
            to_integer(pix_x) < L3P2_X2) or
            (to_integer(pix_x) >= L3P3_X1 and
            to_integer(pix_x) < L3P3_X2))) then
                graph_rgb <= level_rgb;

            -- Level 4 print
            elsif
            (to_integer(pix_y) >= L4_Y and
            to_integer(pix_y) < L4_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= L4P1_X1 and
            to_integer(pix_x) < L4P1_X2) or
            (to_integer(pix_x) >= L4P2_X1 and
            to_integer(pix_x) < L4P2_X2))) then
                graph_rgb <= level_rgb;

            -- Player 1 projectile print
            elsif 
            (to_integer(pix_x) >= to_integer(projectile_p1_x_reg) and
            to_integer(pix_x) < to_integer(projectile_p1_x_reg) + PROJECTILE_SIZE_X and
            to_integer(pix_y) >= to_integer(projectile_p1_y_reg) and
            to_integer(pix_y) < to_integer(projectile_p1_y_reg) + PROJECTILE_SIZE_Y) then
                graph_rgb <= PROJECTILE_ROM(to_integer(pix_y) - to_integer(projectile_p1_y_reg), to_integer(pix_x) - to_integer(projectile_p1_x_reg));

            -- Player 2 projectile print
            elsif 
            (to_integer(pix_x) >= to_integer(projectile_p2_x_reg) and
            to_integer(pix_x) < to_integer(projectile_p2_x_reg) + PROJECTILE_SIZE_X and
            to_integer(pix_y) >= to_integer(projectile_p2_y_reg) and
            to_integer(pix_y) < to_integer(projectile_p2_y_reg) + PROJECTILE_SIZE_Y) then
                graph_rgb <= PROJECTILE_ROM(to_integer(pix_y) - to_integer(projectile_p2_y_reg), to_integer(pix_x) - to_integer(projectile_p2_x_reg));
            
            -- Player 1 print
            elsif
            (to_integer(pix_x) >= p1_x_reg and
            to_integer(pix_x) < p1_x_reg + CHAR_SIZE_X and
            to_integer(pix_y) >= p1_y_reg and
            to_integer(pix_y) < p1_y_reg + CHAR_SIZE_Y) then
                graph_rgb <= AMERICAN_SOLDIER_IDLE_ROM(to_integer(pix_y) - to_integer(p1_y_reg), to_integer(pix_x) - to_integer(p1_x_reg));

            -- Player 2 print
            elsif
            (to_integer(pix_x) >= p2_x_reg and
            to_integer(pix_x) < p2_x_reg + CHAR_SIZE_X and
            to_integer(pix_y) >= p2_y_reg and
            to_integer(pix_y) < p2_y_reg + CHAR_SIZE_Y) then
                graph_rgb <= GERMAN_SOLDIER_IDLE_ROM(to_integer(pix_y) - to_integer(p2_y_reg), to_integer(pix_x) - to_integer(p2_x_reg));

            else
                graph_rgb <= inner_rgb; -- White background

            end if;
        
        end if;

    end process;
end arch;