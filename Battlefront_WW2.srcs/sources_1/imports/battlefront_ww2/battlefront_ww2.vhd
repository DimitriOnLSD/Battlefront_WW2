library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity battlefront_ww2 is
	port (
		clk, reset       : in std_logic;
		pixel_x, pixel_y : in std_logic_vector(9 downto 0);
		video_on         : in std_logic;
		btn              : in std_logic_vector(3 downto 0);
		graph_rgb        : out std_logic_vector(11 downto 0);
		led              : out std_logic_vector(15 downto 0)
	);
end battlefront_ww2;

architecture arch of battlefront_ww2 is
	----------------------------------------------
	-- CONSTANTS
	----------------------------------------------
	signal pix_x, pix_y       : unsigned(9 downto 0);
	constant MAX_X            : integer := 640; -- Largura do ecrã
	constant MAX_Y            : integer := 480; -- Altura do ecrã
	constant BORDER_THICKNESS : integer := 32; -- Espessura da moldura
	----------------------------------------------
	-- REFERENCE TICK AND RESET LOGIC
	----------------------------------------------
	signal border_rgb : std_logic_vector(11 downto 0) := "000000000000"; -- Preto
	signal inner_rgb  : std_logic_vector(11 downto 0) := "111111111111"; -- Branco
	signal level_rgb  : std_logic_vector(11 downto 0) := "000000000000"; -- Preto (cor dos níveis)
	signal text_rgb   : std_logic_vector(11 downto 0) := "111111111111"; -- Branco (texto)
	----------------------------------------------
	-- FLOOR, PLATFORM, LEVELS & BORDER CONSTANTS
	----------------------------------------------
	constant LEVEL_THICKNESS : integer := 16; -- Espessura das plataformas
	constant LEVEL_DISTANCE  : integer := 64; -- Distância vertical entre níveis
	constant LEFT_MARGIN     : integer := BORDER_THICKNESS; -- Margem esquerda da moldura preta
	constant RIGHT_MARGIN    : integer := MAX_X - BORDER_THICKNESS; -- Margem direita da moldura preta
	constant LEVEL_1_WIDTH   : integer := 64;
	constant LEVEL_2_WIDTH   : integer := 128;
	constant LEVEL_3_WIDTH   : integer := 256;
	----------------------------------------------
	constant LEVEL_1_Y             : integer := MAX_Y - BORDER_THICKNESS - LEVEL_DISTANCE - LEVEL_THICKNESS; -- Posição do primeiro nível
	constant LEVEL_1_PLAT1_START_X : integer := LEFT_MARGIN; -- Início da plataforma 1
	constant LEVEL_1_PLAT1_END_X   : integer := LEFT_MARGIN + LEVEL_1_WIDTH; -- Fim da plataforma 1
	constant LEVEL_1_PLAT2_START_X : integer := 200; -- Início da plataforma 1
	constant LEVEL_1_PLAT2_END_X   : integer := 200 + LEVEL_3_WIDTH; -- Fim da plataforma 1
	----------------------------------------------
	constant LEVEL_2_Y             : integer := LEVEL_1_Y - LEVEL_DISTANCE - LEVEL_THICKNESS; -- Posição do segundo nível
	constant LEVEL_2_PLAT1_START_X : integer := LEFT_MARGIN; -- Início da plataforma 1
	constant LEVEL_2_PLAT1_END_X   : integer := LEVEL_2_PLAT1_START_X + 120; -- Fim da plataforma 1 (150 pixels)
	constant LEVEL_2_PLAT2_START_X : integer := LEVEL_2_PLAT1_END_X + 155; -- Início da plataforma 2 (80 pixels mais à direita)
	constant LEVEL_2_PLAT2_END_X   : integer := LEVEL_2_PLAT2_START_X + 60; -- Fim da plataforma 2
	constant LEVEL_2_PLAT3_START_X : integer := MAX_X - BORDER_THICKNESS - 60; -- Início da plataforma 3
	constant LEVEL_2_PLAT3_END_X   : integer := MAX_X - BORDER_THICKNESS; -- Fim da plataforma 3
	----------------------------------------------
	constant LEVEL_3_Y             : integer := LEVEL_2_Y - LEVEL_DISTANCE - LEVEL_THICKNESS; -- Posição do terceiro nível
	constant LEVEL_3_PLAT1_START_X : integer := LEFT_MARGIN; -- Início da plataforma 1
	constant LEVEL_3_PLAT1_END_X   : integer := LEFT_MARGIN + 60; -- Fim da plataforma 1
	constant LEVEL_3_PLAT2_START_X : integer := MAX_X - BORDER_THICKNESS - 150; -- Início da plataforma 2
	constant LEVEL_3_PLAT2_END_X   : integer := MAX_X - BORDER_THICKNESS; -- Fim da plataforma 2
	constant LEVEL_3_PLAT3_START_X : integer := (MAX_X - 60) / 2 - 50; -- Início da plataforma 3 (60 pixels, deslocada 50 para a esquerda)
	constant LEVEL_3_PLAT3_END_X   : integer := LEVEL_3_PLAT3_START_X + 60; -- Fim da plataforma 3
	----------------------------------------------
	constant LEVEL_4_Y             : integer := LEVEL_3_Y - LEVEL_DISTANCE - LEVEL_THICKNESS; -- Posição do quarto nível
	constant LEVEL_4_PLAT1_START_X : integer := LEFT_MARGIN; -- Início da plataforma 1
	constant LEVEL_4_PLAT1_END_X   : integer := LEFT_MARGIN + 60; -- Fim da plataforma 1
	constant LEVEL_4_PLAT2_START_X : integer := LEFT_MARGIN + 240; -- Início da plataforma 2
	constant LEVEL_4_PLAT2_END_X   : integer := LEFT_MARGIN + 240 + LEVEL_3_WIDTH; -- Fim da plataforma 2 (150 pixels mais à direita)
	----------------------------------------------
	-- COLLISSION CONSTANTS
	----------------------------------------------
	constant COLLISION_0_Y : integer := MAX_Y - BORDER_THICKNESS; -- Bottom platform
	constant COLLISION_1_Y : integer := LEVEL_1_Y;
	constant COLLISION_2_Y : integer := LEVEL_2_Y;
	constant COLLISION_3_Y : integer := LEVEL_3_Y;
	constant COLLISION_4_Y : integer := LEVEL_4_Y;
	----------------------------------------------
	constant COLLISION_L1P1_X_MIN : integer := LEVEL_1_PLAT1_START_X; -- Platform range (X-axis)
	constant COLLISION_L1P1_X_MAX : integer := LEVEL_1_PLAT1_END_X; -- Full width for ground
	constant COLLISION_L1P2_X_MIN : integer := LEVEL_1_PLAT2_START_X; -- Platform range (X-axis)
	constant COLLISION_L1P2_X_MAX : integer := LEVEL_1_PLAT2_END_X; -- Full width for ground
	----------------------------------------------
	constant COLLISION_L2P1_X_MIN : integer := LEVEL_2_PLAT1_START_X; -- Platform range (X-axis)
	constant COLLISION_L2P1_X_MAX : integer := LEVEL_2_PLAT1_END_X; -- Full width for ground
	constant COLLISION_L2P2_X_MIN : integer := LEVEL_2_PLAT2_START_X; -- Platform range (X-axis)
	constant COLLISION_L2P2_X_MAX : integer := LEVEL_2_PLAT2_END_X; -- Full width for ground
	constant COLLISION_L2P3_X_MIN : integer := LEVEL_2_PLAT3_START_X; -- Platform range (X-axis)
	constant COLLISION_L2P3_X_MAX : integer := LEVEL_2_PLAT3_END_X; -- Full width for ground
	----------------------------------------------
	constant COLLISION_L3P1_X_MIN : integer := LEVEL_3_PLAT1_START_X; -- Platform range (X-axis)
	constant COLLISION_L3P1_X_MAX : integer := LEVEL_3_PLAT1_END_X; -- Full width for ground
	constant COLLISION_L3P2_X_MIN : integer := LEVEL_3_PLAT2_START_X; -- Platform range (X-axis)
	constant COLLISION_L3P2_X_MAX : integer := LEVEL_3_PLAT2_END_X; -- Full width for ground
	constant COLLISION_L3P3_X_MIN : integer := LEVEL_3_PLAT3_START_X; -- Platform range (X-axis)
	constant COLLISION_L3P3_X_MAX : integer := LEVEL_3_PLAT3_END_X; -- Full width for ground
	----------------------------------------------
	constant COLLISION_L4P1_X_MIN : integer := LEVEL_4_PLAT1_START_X; -- Platform range (X-axis)
	constant COLLISION_L4P1_X_MAX : integer := LEVEL_4_PLAT1_END_X; -- Full width for ground
	constant COLLISION_L4P2_X_MIN : integer := LEVEL_4_PLAT2_START_X; -- Platform range (X-axis)
	constant COLLISION_L4P2_X_MAX : integer := LEVEL_4_PLAT2_END_X; -- Full width for ground
	----------------------------------------------
	-- ITEMS & CHARACTER ROMS
	----------------------------------------------
	constant CHAR_SIZE_X             : integer := 32;
	constant CHAR_SIZE_Y             : integer := 32;
	constant CHAR_V_X                : integer := 1;
	constant CHAR_V_Y                : integer := 1;
	constant FEET_POSITION           : integer := 20;
	constant HEAD_POSITION           : integer := 18;
	constant HEAD_TO_BARREL_DISTANCE : integer := 11;
	----------------------------------------------
	constant PROJECTILE_SIZE_X : integer := 5;
	constant PROJECTILE_SIZE_Y : integer := 3;
	constant PROJECTILE_V_X    : integer := 1;
    constant MAX_PROJECTILES   : integer := 5;
	----------------------------------------------
	constant HEART_SIZE_X            : integer := 16;
	constant HEART_SIZE_Y            : integer := 16;
	constant DISTANCE_BETWEEN_HEARTS : integer := 4;
	constant HEART_P1_START_X        : integer := BORDER_THICKNESS;
	constant HEART_P2_START_X        : integer := MAX_X - BORDER_THICKNESS - 3 * HEART_SIZE_X - 2 * DISTANCE_BETWEEN_HEARTS;
	constant HEART_START_Y           : integer := 8;
	----------------------------------------------
	constant PLAYER_ONE_HEART_1_X : integer := HEART_P1_START_X;
	constant PLAYER_ONE_HEART_1_Y : integer := HEART_START_Y;
	constant PLAYER_ONE_HEART_2_X : integer := PLAYER_ONE_HEART_1_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_ONE_HEART_2_Y : integer := HEART_START_Y;
	constant PLAYER_ONE_HEART_3_X : integer := PLAYER_ONE_HEART_2_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_ONE_HEART_3_Y : integer := HEART_START_Y;
	----------------------------------------------
	constant PLAYER_TWO_HEART_3_X : integer := HEART_P2_START_X;
	constant PLAYER_TWO_HEART_3_Y : integer := HEART_START_Y;
	constant PLAYER_TWO_HEART_2_X : integer := PLAYER_TWO_HEART_3_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_TWO_HEART_2_Y : integer := HEART_START_Y;
	constant PLAYER_TWO_HEART_1_X : integer := PLAYER_TWO_HEART_2_X + HEART_SIZE_X + DISTANCE_BETWEEN_HEARTS;
	constant PLAYER_TWO_HEART_1_Y : integer := HEART_START_Y;
	----------------------------------------------
	type rom_item_type       is array (0 to 15, 0 to 15) of std_logic_vector(11 downto 0);
	type rom_char_type       is array (0 to 31, 0 to 31) of std_logic_vector(11 downto 0);
	type rom_projectile_type is array (0 to  2, 0 to  4) of std_logic_vector(11 downto 0);
	----------------------------------------------
	-- CONSTANT PROJECTILE_ROM : rom_projectile_type :=
	-- (
	-- ("110111011101", "010001000100", "000000000000"),
	-- ("111111111111", "111111111111", "111111111111")
	-- );
	constant PROJECTILE_ROM : rom_projectile_type := 
	(
	("000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000")
    );
    ----------------------------------------------
    constant HEART_ROM : rom_item_type := 
    (
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "111100000000", "111100000000", "111111111111", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111100000000", "111100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000")
    );
    ----------------------------------------------
    constant AMERICAN_SOLDIER_IDLE_ROM : rom_char_type := 
    (

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "011001101001", "011001101001", "010001000110", "010001000110", "010001000110", "010001000110", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "011001101001", "011001101001", "111111111111", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000110", "010001000110", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "111110011001", "111110011001", "111110011001", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111101100110", "111101100110", "000100010001", "111111011011", "111111011011", "111111011011", "111111011011", "111111011011", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "111110011001", "111111011011", "111111011011", "111111011011", "111111011011", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000001000001", "000001000001", "000001000001", "000000000000", "111101100110", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "000001000001", "000000000000", "111101100110", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000"), 
    ("111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "001001100100", "000100010001", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "000001000001", "000001000001", "001001100100", "001001100100", "001001100100", "000000000000", "001001100100", "001001100100", "001001100100", "001001100100", "000100010001", "000000000000", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "000000000000", "000000000000", "000000000000", "001000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "001000000000", "001000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "001001100100", "001001100100", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "111110011001", "000000000000", "000000000000", "000001000001", "000000000000", "111110011001", "111101100110", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000010001", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "000000000000", "000000000000", "000000000000", "000001000001", "000000000000", "111110011001", "111101100110", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000001000001", "000000010001", "000000000000", "000000000000", "000000000000", "111110011001", "111110011001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111101100110", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011001101001", "011001101001", "011001101001", "011001101001", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011001101001", "011001101001", "011001101001", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011001101001", "011001101001", "011001101001", "010001000110", "010001000110", "000100010100", "000100010100", "000100010100", "000100010100", "000100010100", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "011001101001", "010001000110", "010001000110", "010001000110", "010001000110", "000000000001", "000100010100", "000100010100", "000100010100", "000100010100", "000000000001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000110", "010001000110", "010001000110", "010001000110", "000000000001", "000000000000", "000000000000", "000000000000", "000000000000", "000100010100", "000000000001", "000000000001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000110", "010001000110", "010001000110", "010001000110", "000100010100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010100", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000000000001", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "111111111111", "000000000000", "000100010100", "000100010100", "000100010100", "000000000001", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000100010001", "000100010001", "000000000000", "000000000000", "000000000000", "111111111111", "000000000000", "000000000001", "000000000001", "000000000001", "000000000001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "010100010000", "010100010000", "000000000000", "000000000000", "000000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001000000000", "010100010000", "001000000000", "001000000000", "001000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "000000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "000000000000", "111111111111", "000000000000", "010100010000", "010100010000", "010100010000", "010100010000", "010100010000", "001000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 

    );
    ----------------------------------------------
    constant AMERICAN_SOLDIER_WALK_B_ROM : rom_char_type := 
    (

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "011001111000", "011001111000", "011001111000", "010001010110", "010001010110", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "011001111000", "111111111111", "010001010110", "010001010110", "010001010110", "010001010110", "010001010110", "001000110011", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "011001111000", "111111111111", "010001010110", "010001010110", "010001010110", "010001010110", "001100110100", "001100110100", "001100110100", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "010001010110", "010001010110", "010001010110", "010001010110", "001100110100", "001100110100", "001100110100", "001100110100", "001100110100", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001100110100", "001100110100", "001100110100", "001100110100", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111110101001", "111110101001", "111110101001", "001100110011", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111110101001", "111110101001", "111110101001", "001100110011", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111001100111", "001100110011", "111111011011", "111111011011", "111111011011", "111111011011", "111001100111", "111111111111", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111110101001", "111111011011", "111111011011", "111001100111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001001100100", "001001100100", "001001100100", "010000100011", "001001010011", "000000000000", "000000000000", "000000000000", "001000100011", "001000100011", "001000100011", "001000100011", "001000100011", "001000100011", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001010011", "111111111111", "001001100100", "001001100100", "000000000000", "010100110011", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100000000", "000100000000", "000000000000", "000000000000", "000100000000", "000100000000", "000100000000", "000100000000", "000100000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001010011", "111111111111", "001001100100", "001001100100", "000000000000", "010100110011", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "010000010000", "010100010000", "010100010000", "010100010000", "010000010000", "000000000000", "000000000000", "010000010000", "010100010000", "010100010000", "010100010000", "010100010000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001010011", "001001010011", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010000010000", "010100010000", "010000010000", "010000010000", "000000000000", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "000100100010", "000000000000", "111110011001", "111110101001", "111110101001", "111110101001", "111110101001", "000000000000", "000100100010", "000100100010", "111110101001", "111001100111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "000100010001", "000000000000", "111110101001", "111110101001", "111110101001", "111110101001", "000000000000", "000000000000", "000000000000", "000000000000", "111110011001", "111001100111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "001001100100", "001001100100", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "001001010011", "000100100010", "000000000000", "111110011001", "111110101001", "111110101001", "111110101001", "000000000000", "000000000000", "000000000000", "000000000000", "111110101001", "111001100111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000100100010", "000100100010", "000100100010", "000100100010", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "001001010011", "000000000000", "001001010011", "001001010011", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010101010111", "010101010111", "001100110101", "000100010100", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "010001000111", "010001000110", "001000100101", "000100010100", "000000000001", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "001100010000", "001100010000", "001000010000", "000000000000", "001000010000", "000000000000", "000000000000", "010001000110", "001000100101", "000100010100", "000100010100", "000000000001", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "001000010000", "000000000000", "001000010000", "000000000000", "000000000000", "001000100100", "000100010100", "000100010100", "000100010100", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "000000000000", "000000000000", "001000010000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "000000000000", "000000000000", "001100010000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "010000100000", "010000100000", "000000000000", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 





    );
    ----------------------------------------------
    constant GERMAN_SOLDIER_IDLE_ROM : rom_char_type := 
    (

    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "011101110111", "011101110111", "010001010101", "010001000100", "010001000100", "001000100010", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "101110111011", "111111111111", "111111111111", "010101010101", "001000100010", "001000100010", "001000100010", "001000100010", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "101110111011", "111111111111", "111111111111", "010101010101", "001000100010", "001000100010", "001000100010", "001000100010", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000100010001", "010101010101", "010001000100", "010001000100", "001100110011", "001100110011", "001100110011", "001000100010", "001000100010", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "001000100010", "001100110011", "001100110011", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "111110111001", "111110111001", "111110111001", "111110111001", "001000100010", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111101100110", "001000100010", "001000100010", "111111011011", "111111011011", "111111011011", "111111011011", "111101100110", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111101100110", "001000100010", "001000100010", "111111011011", "111111011011", "111111011011", "111111011011", "111101100110", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000010001", "000000000000", "000000000000", "000000000000", "111110111001", "111111011011", "111111011011", "111111011011", "111101100110", "111101100110", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "001000100010", "001000100010", "000000000000", "101001000100", "101001000100", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111111111111"), 
    ("111111111111", "000000000000", "100000000000", "101000010001", "001100110011", "001100110011", "001100110011", "001100110011", "010001000100", "010001000100", "010001000100", "001000100010", "001000100010", "001100100010", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000"), 
    ("000000000000", "011100100010", "000100010001", "001000010001", "110101000100", "001100110011", "000000000000", "000000000000", "001000100010", "001100110011", "001100110011", "001100110011", "001100110011", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("001100000000", "011001100110", "000100010001", "001100110011", "111110111011", "011000100010", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "001100110011", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000000000000", "011001100110", "000000000000", "110101100110", "011100000000", "010001000100", "001100110011", "000100010001", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000000000000", "000000000000", "110010101010", "111110101010", "100000010001", "001000100010", "010001000100", "010001000100", "010001000100", "010001000100", "010001000100", "001000100010", "001000100010", "000000000000", "111110111001", "111110111001", "111110000111", "111101100110", "000000000000", "000000000000", "000000000000", "111110101000", "111110101000", "111110010111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("000100000000", "000000000000", "000100000000", "100000000000", "001000010001", "010001000100", "010001000100", "010001000100", "010001000100", "010001000100", "010001000100", "001000100010", "001000100010", "000000000000", "111110101000", "111110101000", "111101110111", "010000100010", "000000000000", "000000000000", "000000000000", "111110101000", "111110101000", "111110010111", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 

    ("000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "001000100010", "001000100010", "001000100010", "010101010101", "010001000100", "010001000100", "010001000100", "001100110011", "000100010001", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "001000100010", "001000100010", "001000100010", "010101010101", "010001000100", "010001000100", "010001000100", "001100110011", "000100010001", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "001100110011", "010001000100", "010001000100", "010001000100", "010101010101", "010101010101", "010101010101", "000100010001", "000100010001", "000100010001", "000100010001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "001000100010", "010101010101", "010101010101", "010101010101", "010101010101", "010001010101", "000100010001", "000100010001", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "111111111111", "010101010101", "010101010101", "010101010101", "010101010101", "000000010001", "000000000000", "000000000000", "000100010001", "000100010001", "000100010001", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "010101010101", "010101010101", "010101010101", "010101010101", "010101010101", "000000000000", "000000000000", "000000000000", "000100010001", "000100010001", "000100010001", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010101010101", "010101010101", "010101010101", "010101010101", "010101010101", "000000000000", "000000000000", "000000000000", "000100010001", "000100010001", "000100010001", "001000100010", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "010001000100", "010101010101", "010101010101", "000000010001", "000000010001", "111111111111", "111111111111", "000100010001", "000100010001", "001000100010", "000100010001", "000100010001", "000100010001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "000100010001", "000100010001", "001000100010", "000100010001", "000100010001", "000100010001", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 
    ("111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "111111111111", "111111111111", "111111111111", "000000000000", "000000000000", "000000000000", "000000000000", "000000000000", "000100010001", "000000000000", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111", "111111111111"), 



    );
    ----------------------------------------------
    -- CHARACTER REGISTERS AND SPAWN SIGNALS
    ----------------------------------------------
    constant player_one_spawn_x : integer := MAX_X/2 - CHAR_SIZE_X/2;
    constant player_one_spawn_y : integer := MAX_Y - CHAR_SIZE_X * 2;
    ----------------------------------------------
    constant player_two_spawn_x : integer := MAX_X/2 - CHAR_SIZE_X/2;
    constant player_two_spawn_y : integer := COLLISION_4_Y - CHAR_SIZE_Y;
    ----------------------------------------------
    signal player_one_lives_reg  : integer range 0 to 3 := 3;
    signal player_one_lives_next : integer range 0 to 3 := 3;
    signal player_two_lives_reg  : integer range 0 to 3 := 3;
    signal player_two_lives_next : integer range 0 to 3 := 3;
    ----------------------------------------------
    signal player_one_x_reg, player_one_x_next : unsigned(9 downto 0) := to_unsigned(player_one_spawn_x, 10);
    signal player_one_y_reg, player_one_y_next : unsigned(9 downto 0) := to_unsigned(player_one_spawn_y, 10);
    ----------------------------------------------
    signal player_two_x_reg, player_two_x_next : unsigned(9 downto 0) := to_unsigned(player_two_spawn_x, 10);
    signal player_two_y_reg, player_two_y_next : unsigned(9 downto 0) := to_unsigned(player_two_spawn_y, 10);
    ----------------------------------------------
    signal projectile_p1_x_reg         : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p1_y_reg         : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p1_x_next        : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p1_y_next        : unsigned(9 downto 0) := to_unsigned(0, 10);
    ----------------------------------------------
    signal projectile_p2_active        : std_logic := '0';
    signal projectile_p2_x_reg         : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p2_y_reg         : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p2_x_next        : unsigned(9 downto 0) := to_unsigned(0, 10);
    signal projectile_p2_y_next        : unsigned(9 downto 0) := to_unsigned(0, 10);
    ----------------------------------------------
    -- OBJECTS OUTPUT SIGNALS
    ----------------------------------------------
    signal refr_tick : std_logic;
    ----------------------------------------------
    -- COLLISION SIGNALS
    ----------------------------------------------
    signal collision_top        : std_logic := '0';
    signal collision_bottom     : std_logic := '0';
    signal collision_left_side  : std_logic := '0';
    signal collision_right_side : std_logic := '0';
    ----------------------------------------------
    signal collision_margin_top    : std_logic := '0';
    signal collision_margin_bottom : std_logic := '0';
    signal collision_margin_left   : std_logic := '0';
    signal collision_margin_right  : std_logic := '0';
    ----------------------------------------------
    signal collision_projectile_border : std_logic := '0';
    signal collision_projectile_player_one : std_logic := '0';
    signal collision_projectile_player_two : std_logic := '0';
    ----------------------------------------------
begin
	----------------------------------------------
	-- REFERENCE TICK AND RESET LOGIC
	----------------------------------------------
	process (clk, reset)
	begin
		if reset = '1' then
			player_one_x_reg <= to_unsigned(player_one_spawn_x, 10);
			player_one_y_reg <= to_unsigned(player_one_spawn_y, 10);
			player_two_x_reg <= to_unsigned(player_two_spawn_x, 10);
			player_two_y_reg <= to_unsigned(player_two_spawn_y, 10);
            player_one_lives_reg <= 3;
            player_two_lives_reg <= 3;
            projectile_p1_x_reg <= to_unsigned(0, 10);
            projectile_p1_y_reg <= to_unsigned(0, 10);
		elsif (clk'EVENT and clk = '1') then
			player_one_x_reg <= player_one_x_next;
			player_one_y_reg <= player_one_y_next;
			player_two_x_reg <= player_two_x_next;
			player_two_y_reg <= player_two_y_next;
            projectile_p1_x_reg <= projectile_p1_x_next;
            projectile_p1_y_reg <= projectile_p1_y_next;
            player_one_lives_reg <= player_one_lives_next;
            player_two_lives_reg <= player_two_lives_next;
		end if;
	end process;
	pix_x <= unsigned(pixel_x);
	pix_y <= unsigned(pixel_y);
	refr_tick <= '1' when (pix_y = 481) and (pix_x = 0) else '0';
    ----------------------------------------------
	-- LED DEBUG
	----------------------------------------------
    process (collision_margin_top, collision_margin_bottom, collision_margin_left, collision_margin_right, collision_top, collision_bottom)
        variable i : integer;
    begin

        if collision_margin_top = '1' then
            led(0) <= '1';
        else
            led(0) <= '0';
        end if;

        if collision_margin_bottom = '1' then
            led(1) <= '1';
        else
            led(1) <= '0';
        end if;

        if collision_margin_left = '1' then
            led(2) <= '1';
        else
            led(2) <= '0';
        end if;

        if collision_margin_right = '1' then
            led(3) <= '1';
        else
            led(3) <= '0';
        end if;

        if collision_top = '1' then
            led(4) <= '1';
        else
            led(4) <= '0';
        end if;

        if collision_bottom = '1' then
            led(5) <= '1';
        else
            led(5) <= '0';
        end if;

    end process;
	----------------------------------------------
	-- MOVEMENT & SHOOTING LOGIC
	----------------------------------------------
	process (refr_tick, btn, collision_margin_top, collision_margin_bottom, collision_margin_left, collision_margin_right, collision_top, collision_bottom, collision_projectile_border, collision_projectile_player_two)
    begin

        if refr_tick = '1' then

            -- Horizontal movement
            if btn(0) = '1' then
                if collision_margin_left = '0' then
                    player_one_x_next <= player_one_x_reg - CHAR_V_X;
                else
                    player_one_x_next <= player_one_x_reg;
                end if;

            elsif btn(1) = '1' then
                if collision_margin_right = '0' then
                    player_one_x_next <= player_one_x_reg + CHAR_V_X;
                else
                    player_one_x_next <= player_one_x_reg;
                end if;
            end if;

            -- Vertical movement
            if btn(2) = '1' then
                if (collision_margin_top = '0') and (collision_top = '0') then
                    player_one_y_next <= player_one_y_reg - CHAR_V_Y;
                else
                    player_one_y_next <= player_one_y_reg;
                end if;
            else
                if (collision_margin_bottom = '0') and (collision_bottom = '0') then
                    player_one_y_next <= player_one_y_reg + CHAR_V_Y;
                elsif (collision_top = '1') then
                    player_one_y_next <= player_one_y_reg + CHAR_V_Y;
                elsif (collision_margin_bottom = '1') or (collision_bottom = '1') then
                    player_one_y_next <= player_one_y_reg;
                end if;
            end if; 

            -- Shooting
            if btn(3) = '1' then
                projectile_p1_x_next <= player_one_x_reg + CHAR_SIZE_X - PROJECTILE_SIZE_X;
                projectile_p1_y_next <= player_one_y_reg + HEAD_TO_BARREL_DISTANCE;
            else 
                if (collision_projectile_border = '0') and (collision_projectile_player_two = '0') then
                    projectile_p1_x_next <= projectile_p1_x_reg + PROJECTILE_V_X;
                    projectile_p1_y_next <= projectile_p1_y_reg;
                else
                    projectile_p1_x_next <= to_unsigned(0, 10);
                    projectile_p1_y_next <= to_unsigned(0, 10);
                end if;
            end if;

        end if;

    end process;
    ----------------------------------------------
    -- COLLISION BORDER LOGIC
    ----------------------------------------------
    process (player_one_x_reg, player_one_y_reg, refr_tick)
    begin

        if refr_tick = '1' then

            -- Collision with floor
            if (player_one_y_reg >= (COLLISION_0_Y - CHAR_SIZE_Y)) then
                collision_margin_bottom <= '1';
            else
                collision_margin_bottom <= '0';
            end if;

            -- Collision with top border
            if (player_one_y_reg <= BORDER_THICKNESS) then
                collision_margin_top <= '1';
            else
                collision_margin_top <= '0';
            end if;

            -- Collision with left border
            if (player_one_x_reg <= LEFT_MARGIN) then
                collision_margin_left <= '1';
            else
                collision_margin_left <= '0';
            end if;

            -- Collision with right border
            if (player_one_x_reg >= (RIGHT_MARGIN - CHAR_SIZE_X)) then
                collision_margin_right <= '1';
            else
                collision_margin_right <= '0';
            end if;

        end if;

    end process;
    ----------------------------------------------
    -- COLLISION PLATFORM LOGIC
    ----------------------------------------------
    process (player_one_x_reg, player_one_y_reg, projectile_p1_x_reg, projectile_p1_y_reg)
    begin
        -- Collision with feet on platforms
        -- Each line represents a platform
        if 
        ((player_one_x_reg + FEET_POSITION > COLLISION_L1P1_X_MIN) and (player_one_x_reg < COLLISION_L1P1_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_1_Y) and (player_one_y_reg < COLLISION_1_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L1P2_X_MIN) and (player_one_x_reg < COLLISION_L1P2_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_1_Y) and (player_one_y_reg < COLLISION_1_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L2P1_X_MIN) and (player_one_x_reg < COLLISION_L2P1_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_2_Y) and (player_one_y_reg < COLLISION_2_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L2P2_X_MIN) and (player_one_x_reg < COLLISION_L2P2_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_2_Y) and (player_one_y_reg < COLLISION_2_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L2P3_X_MIN) and (player_one_x_reg < COLLISION_L2P3_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_2_Y) and (player_one_y_reg < COLLISION_2_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L3P1_X_MIN) and (player_one_x_reg < COLLISION_L3P1_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_3_Y) and (player_one_y_reg < COLLISION_3_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L3P2_X_MIN) and (player_one_x_reg < COLLISION_L3P2_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_3_Y) and (player_one_y_reg < COLLISION_3_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L3P3_X_MIN) and (player_one_x_reg < COLLISION_L3P3_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_3_Y) and (player_one_y_reg < COLLISION_3_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L4P1_X_MIN) and (player_one_x_reg < COLLISION_L4P1_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_4_Y) and (player_one_y_reg < COLLISION_4_Y + LEVEL_THICKNESS)) or
        ((player_one_x_reg + FEET_POSITION > COLLISION_L4P2_X_MIN) and (player_one_x_reg < COLLISION_L4P2_X_MAX) and (player_one_y_reg + CHAR_SIZE_Y >= COLLISION_4_Y) and (player_one_y_reg < COLLISION_4_Y + LEVEL_THICKNESS)) then
            collision_bottom <= '1';
        else
            collision_bottom <= '0';
        end if;

        -- Collision with head on platforms
        -- Each line represents a platform
        if
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L1P1_X_MIN) and (player_one_x_reg < COLLISION_L1P1_X_MAX) and (player_one_y_reg <= COLLISION_1_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_1_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L1P2_X_MIN) and (player_one_x_reg < COLLISION_L1P2_X_MAX) and (player_one_y_reg <= COLLISION_1_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_1_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L2P1_X_MIN) and (player_one_x_reg < COLLISION_L2P1_X_MAX) and (player_one_y_reg <= COLLISION_2_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_2_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L2P2_X_MIN) and (player_one_x_reg < COLLISION_L2P2_X_MAX) and (player_one_y_reg <= COLLISION_2_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_2_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L2P3_X_MIN) and (player_one_x_reg < COLLISION_L2P3_X_MAX) and (player_one_y_reg <= COLLISION_2_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_2_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L3P1_X_MIN) and (player_one_x_reg < COLLISION_L3P1_X_MAX) and (player_one_y_reg <= COLLISION_3_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_3_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L3P2_X_MIN) and (player_one_x_reg < COLLISION_L3P2_X_MAX) and (player_one_y_reg <= COLLISION_3_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_3_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L3P3_X_MIN) and (player_one_x_reg < COLLISION_L3P3_X_MAX) and (player_one_y_reg <= COLLISION_3_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_3_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L4P1_X_MIN) and (player_one_x_reg < COLLISION_L4P1_X_MAX) and (player_one_y_reg <= COLLISION_4_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_4_Y)) or
        ((player_one_x_reg + HEAD_POSITION > COLLISION_L4P2_X_MIN) and (player_one_x_reg < COLLISION_L4P2_X_MAX) and (player_one_y_reg <= COLLISION_4_Y + LEVEL_THICKNESS) and (player_one_y_reg + CHAR_SIZE_Y > COLLISION_4_Y)) then
            collision_top <= '1';
        else
            collision_top <= '0';
        end if;

        -- Collision with border
        if projectile_p1_x_reg >= (RIGHT_MARGIN - PROJECTILE_SIZE_X) then
            collision_projectile_border <= '1';
        else 
            collision_projectile_border <= '0';
        end if;

        -- Collision with player 1

        -- Collision with player 2
        if (projectile_p1_x_reg >= player_two_x_reg and projectile_p1_x_reg <= player_two_x_reg + CHAR_SIZE_X and projectile_p1_y_reg >= player_two_y_reg and projectile_p1_y_reg <= player_two_y_reg + CHAR_SIZE_Y) then
            player_two_lives_next <= player_two_lives_reg - 1;
        else 
            player_two_lives_next <= player_two_lives_reg;
        end if;

        -- Collision with player 2
        if (projectile_p1_x_reg >= player_two_x_reg and projectile_p1_x_reg <= player_two_x_reg + CHAR_SIZE_X and projectile_p1_y_reg >= player_two_y_reg and projectile_p1_y_reg <= player_two_y_reg + CHAR_SIZE_Y) then
            collision_projectile_player_two <= '1';
        else 
            collision_projectile_player_two <= '0';
        end if;

    end process;
    ----------------------------------------------
    -- PRINT OBJECTS
    ----------------------------------------------
    process (video_on, pix_x, pix_y, player_one_x_reg, player_one_y_reg, projectile_p1_x_reg, projectile_p1_y_reg, player_one_lives_reg, player_two_lives_reg)
        variable i : integer;
    begin
        if video_on = '0' then
            graph_rgb <= "000000000000"; -- Black when video is off
        else

            -- Player 1 Heart 1
            if player_one_lives_reg >= 1 and
            (to_integer(pix_x) >= PLAYER_ONE_HEART_1_X and
            to_integer(pix_x) < PLAYER_ONE_HEART_1_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_ONE_HEART_1_Y and
            to_integer(pix_y) < PLAYER_ONE_HEART_1_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_ONE_HEART_1_Y, to_integer(pix_x) - PLAYER_ONE_HEART_1_X);

            -- Player 1 Heart 2
            elsif player_one_lives_reg >= 2 and
            (to_integer(pix_x) >= PLAYER_ONE_HEART_2_X and
            to_integer(pix_x) < PLAYER_ONE_HEART_2_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_ONE_HEART_2_Y and
            to_integer(pix_y) < PLAYER_ONE_HEART_2_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_ONE_HEART_2_Y, to_integer(pix_x) - PLAYER_ONE_HEART_2_X);

            -- Player 1 Heart 3
            elsif player_one_lives_reg >= 3 and
            (to_integer(pix_x) >= PLAYER_ONE_HEART_3_X and
            to_integer(pix_x) < PLAYER_ONE_HEART_3_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_ONE_HEART_3_Y and
            to_integer(pix_y) < PLAYER_ONE_HEART_3_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_ONE_HEART_3_Y, to_integer(pix_x) - PLAYER_ONE_HEART_3_X);

            -- Player 2 Heart 1
            elsif player_two_lives_reg >= 1 and
            (to_integer(pix_x) >= PLAYER_TWO_HEART_1_X and
            to_integer(pix_x) < PLAYER_TWO_HEART_1_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_TWO_HEART_1_Y and
            to_integer(pix_y) < PLAYER_TWO_HEART_1_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_TWO_HEART_1_Y, to_integer(pix_x) - PLAYER_TWO_HEART_1_X);

            -- Player 2 Heart 2
            elsif player_two_lives_reg >= 2 and
            (to_integer(pix_x) >= PLAYER_TWO_HEART_2_X and
            to_integer(pix_x) < PLAYER_TWO_HEART_2_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_TWO_HEART_2_Y and
            to_integer(pix_y) < PLAYER_TWO_HEART_2_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_TWO_HEART_2_Y, to_integer(pix_x) - PLAYER_TWO_HEART_2_X);

            -- Player 2 Heart 3
            elsif player_two_lives_reg >= 3 and
            (to_integer(pix_x) >= PLAYER_TWO_HEART_3_X and
            to_integer(pix_x) < PLAYER_TWO_HEART_3_X + HEART_SIZE_X and
            to_integer(pix_y) >= PLAYER_TWO_HEART_3_Y and
            to_integer(pix_y) < PLAYER_TWO_HEART_3_Y + HEART_SIZE_Y) then
                graph_rgb <= HEART_ROM(to_integer(pix_y) - PLAYER_TWO_HEART_3_Y, to_integer(pix_x) - PLAYER_TWO_HEART_3_X);

            -- Border print
            elsif
            (to_integer(pix_x) < BORDER_THICKNESS) or
            (to_integer(pix_x) >= MAX_X - BORDER_THICKNESS) or
            (to_integer(pix_y) < BORDER_THICKNESS) or
            (to_integer(pix_y) >= MAX_Y - BORDER_THICKNESS) then
                graph_rgb <= "000000000000";

            -- Level 1 print
            elsif
            (to_integer(pix_y) >= LEVEL_1_Y and
            to_integer(pix_y) < LEVEL_1_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= LEVEL_1_PLAT1_START_X and
            to_integer(pix_x) < LEVEL_1_PLAT1_END_X) or
            (to_integer(pix_x) >= LEVEL_1_PLAT2_START_X and
            to_integer(pix_x) < LEVEL_1_PLAT2_END_X))) then
                graph_rgb <= level_rgb;

            -- Level 2 print
            elsif
            (to_integer(pix_y) >= LEVEL_2_Y and
            to_integer(pix_y) < LEVEL_2_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= LEVEL_2_PLAT1_START_X and
            to_integer(pix_x) < LEVEL_2_PLAT1_END_X) or
            (to_integer(pix_x) >= LEVEL_2_PLAT2_START_X and
            to_integer(pix_x) < LEVEL_2_PLAT2_END_X) or
            (to_integer(pix_x) >= LEVEL_2_PLAT3_START_X and
            to_integer(pix_x) < LEVEL_2_PLAT3_END_X))) then
                graph_rgb <= level_rgb;

            -- Level 3 print
            elsif
            (to_integer(pix_y) >= LEVEL_3_Y and
            to_integer(pix_y) < LEVEL_3_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= LEVEL_3_PLAT1_START_X and
            to_integer(pix_x) < LEVEL_3_PLAT1_END_X) or
            (to_integer(pix_x) >= LEVEL_3_PLAT2_START_X and
            to_integer(pix_x) < LEVEL_3_PLAT2_END_X) or
            (to_integer(pix_x) >= LEVEL_3_PLAT3_START_X and
            to_integer(pix_x) < LEVEL_3_PLAT3_END_X))) then
                graph_rgb <= level_rgb;

            -- Level 4 print
            elsif
            (to_integer(pix_y) >= LEVEL_4_Y and
            to_integer(pix_y) < LEVEL_4_Y + LEVEL_THICKNESS and
            ((to_integer(pix_x) >= LEVEL_4_PLAT1_START_X and
            to_integer(pix_x) < LEVEL_4_PLAT1_END_X) or
            (to_integer(pix_x) >= LEVEL_4_PLAT2_START_X and
            to_integer(pix_x) < LEVEL_4_PLAT2_END_X))) then
                graph_rgb <= level_rgb;

            -- Projectile print (only one projectile)
            elsif 
            (to_integer(pix_x) >= to_integer(projectile_p1_x_reg) and
            to_integer(pix_x) < to_integer(projectile_p1_x_reg) + PROJECTILE_SIZE_X and
            to_integer(pix_y) >= to_integer(projectile_p1_y_reg) and
            to_integer(pix_y) < to_integer(projectile_p1_y_reg) + PROJECTILE_SIZE_Y) then
                graph_rgb <= PROJECTILE_ROM(to_integer(pix_y) - to_integer(projectile_p1_y_reg), to_integer(pix_x) - to_integer(projectile_p1_x_reg));
            
            -- Player 1 print
            elsif
            (to_integer(pix_x) >= player_one_x_reg and
            to_integer(pix_x) < player_one_x_reg + CHAR_SIZE_X and
            to_integer(pix_y) >= player_one_y_reg and
            to_integer(pix_y) < player_one_y_reg + CHAR_SIZE_Y) then
                graph_rgb <= AMERICAN_SOLDIER_IDLE_ROM(to_integer(pix_y) - to_integer(player_one_y_reg), to_integer(pix_x) - to_integer(player_one_x_reg));

            -- Player 2 print
            elsif
            (to_integer(pix_x) >= player_two_x_reg and
            to_integer(pix_x) < player_two_x_reg + CHAR_SIZE_X and
            to_integer(pix_y) >= player_two_y_reg and
            to_integer(pix_y) < player_two_y_reg + CHAR_SIZE_Y) then
                graph_rgb <= GERMAN_SOLDIER_IDLE_ROM(to_integer(pix_y) - to_integer(player_two_y_reg), to_integer(pix_x) - to_integer(player_two_x_reg));

            else
                graph_rgb <= inner_rgb; -- White background

            end if;
        
        end if;

    end process;
end arch;